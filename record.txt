状态表示：
1. 近邻原子下标使用pymatgen获取，需要0.5s，过于耗时。
解决方法：提前计算格子的周期性邻居，每个构型通过反向查找。
2. 网格单纯划分为立方格子，对某些结构的搜索是不利的，并且立方的周期性并不能构建所有晶体。
解决方法：根据不同的晶系，划分不同的格子。
3. 合理的结构编码可大幅减少强化学习算法难度。
解决方法：考虑晶体的周期性，使用邻接原子，原子特征，距离作为输入，采用图神经网络的结构。
4. 原子位置标号为格点标号，与近邻原子距离矩阵不匹配。
解决方法：原子标号改为0，1，2，3，...与距离特征一致，采用二进制掩码速度优于字典。


动作空间：
1. 结构变换至少考虑原子位置的调整，原子类型的调整，晶格常数的调整。
解决方法：设计智能体输出。


网络训练：
1. 挑选最适当前搜索区域的模型，应是对搜索最有利的。
解决方法：数据通过vasp计算后，随机抽取一部分加入验证集。
2. CGCNN多GPU并行
解决方法：修改DataParallel使其能分配提前准备好的数据。
3. 减少数据加载时间，减少模型保存时间。
解决方法：多线程读写文件
4. 迁移学习
解决方法：大型数据集上预训练，获得初始模型参数


数据采样：
1. 强化学习采样使用CPU采样大幅减少数据传输所需时间，利用多节点多线程优势，大规模并行采样。
解决方法：ssh连接到多个空闲节点，分发多线程并行采样任务。实践表明，多线程与多进程并不会加速，反而降低了速度。
2. 同一轮搜索，可以采用多种格子，分配到不同节点，进行格子生成。
解决方法：不同的worker使用不同的格子，格子文件保存到本地。
3. 不同格子的采样数据汇集。
解决方法：GPU节点整理数据，并按照格子顺序进行排序，方便数据转换为网络输入数据。


掩码机制：
1. agent应选择合理的结构变换动作
解决方法：合理动作构成集合A，执行A中几率最高动作。